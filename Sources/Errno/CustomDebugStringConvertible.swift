extension Errno: CustomDebugStringConvertible {
  public var debugDescription: String {
    switch self {
    case .success:                                  return "NoError(success)"
    case .operationNotPermitted:                    return "Errno(EPERM)"
    case .noSuchFileOrDirectory:                    return "Errno(ENOENT)"
    case .noSuchProcess:                            return "Errno(ESRCH)"
    case .interruptedSystemCall:                    return "Errno(EINTR)"
    case .inputOutputError:                         return "Errno(EIO)"
    case .deviceNotConfigured:                      return "Errno(ENXIO)"
    case .argumentListTooLong:                      return "Errno(E2BIG)"
    case .executableFormatError:                    return "Errno(ENOEXEC)"
    case .badFileDescriptor:                        return "Errno(EBADF)"
    case .noChildProcesses:                         return "Errno(ECHILD)"
    case .resourceTemporarilyUnavailable:           return "Errno(EAGAIN)"
    case .cannotAllocateMemory:                     return "Errno(ENOMEM)"
    case .permissionDenied:                         return "Errno(EACCES)"
    case .badAddress:                               return "Errno(EFAULT)"
    case .blockDeviceRequired:                      return "Errno(ENOTBLK)"
    case .deviceOrResourceBusy:                     return "Errno(EBUSY)"
    case .fileExists:                               return "Errno(EEXIST)"
    case .invalidCrossDeviceLink:                   return "Errno(EXDEV)"
    case .noSuchDevice:                             return "Errno(ENODEV)"
    case .notADirectory:                            return "Errno(ENOTDIR)"
    case .isADirectory:                             return "Errno(EISDIR)"
    case .invalidArgument:                          return "Errno(EINVAL)"
    case .tooManyOpenFilesInSystem:                 return "Errno(ENFILE)"
    case .tooManyOpenFiles:                         return "Errno(EMFILE)"
    case .inappropriateInputOutputControlForDevice: return "Errno(ENOTTY)"
    case .textFileBusy:                             return "Errno(ETXTBSY)"
    case .fileTooLarge:                             return "Errno(EFBIG)"
    case .noSpaceLeftOnDevice:                      return "Errno(ENOSPC)"
    case .illegalSeek:                              return "Errno(ESPIPE)"
    case .readOnlyFileSystem:                       return "Errno(EROFS)"
    case .tooManyLinks:                             return "Errno(EMLINK)"
    case .brokenPipe:                               return "Errno(EPIPE)"
    case .numericalArgumentOutOfDomain:             return "Errno(EDOM)"
    case .resultTooLarge:                           return "Errno(ERANGE)"
    case .resourceDeadlockAvoided:                  return "Errno(EDEADLK)"
    case .fileNameTooLong:                          return "Errno(ENAMETOOLONG)"
    case .noLocksAvailable:                         return "Errno(ENOLCK)"
    case .functionNotImplemented:                   return "Errno(ENOSYS)"
    case .directoryNotEmpty:                        return "Errno(ENOTEMPTY)"
    case .tooManyLevelsOfSymbolicLinks:             return "Errno(ELOOP)"
    case .noMessageOfDesiredType:                   return "Errno(ENOMSG)"
    case .identifierRemoved:                        return "Errno(EIDRM)"
    case .channelNumberOutOfRange:                  return "Errno(ECHRNG)"
    case .level2NotSynchronized:                    return "Errno(EL2NSYNC)"
    case .level3Halted:                             return "Errno(EL3HLT)"
    case .level3Reset:                              return "Errno(EL3RST)"
    case .linkNumberOutOfRange:                     return "Errno(ELNRNG)"
    case .protocolDriverNotAttached:                return "Errno(EUNATCH)"
    case .noCSIStructureAvailable:                  return "Errno(ENOCSI)"
    case .level2Halted:                             return "Errno(EL2HLT)"
    case .invalidExchange:                          return "Errno(EBADE)"
    case .invalidRequestDescriptor:                 return "Errno(EBADR)"
    case .exchangeFull:                             return "Errno(EXFULL)"
    case .noAnode:                                  return "Errno(ENOANO)"
    case .invalidRequestCode:                       return "Errno(EBADRQC)"
    case .invalidSlot:                              return "Errno(EBADSLT)"
    case .badFontFileFormat:                        return "Errno(EBFONT)"
    case .deviceNotAStream:                         return "Errno(ENOSTR)"
    case .noDataAvailable:                          return "Errno(ENODATA)"
    case .timerExpired:                             return "Errno(ETIME)"
    case .outOfStreamsResources:                    return "Errno(ENOSR)"
    case .machineIsNotOnTheNetwork:                 return "Errno(ENONET)"
    case .packageNotInstalled:                      return "Errno(ENOPKG)"
    case .objectIsRemote:                           return "Errno(EREMOTE)"
    case .linkHasBeenSevered:                       return "Errno(ENOLINK)"
    case .advertiseError:                           return "Errno(EADV)"
    case .srmountError:                             return "Errno(ESRMNT)"
    case .communicationErrorOnSend:                 return "Errno(ECOMM)"
    case .protocolError:                            return "Errno(EPROTO)"
    case .multihopAttempted:                        return "Errno(EMULTIHOP)"
    case .rfsSpecificError:                         return "Errno(EDOTDOT)"
    case .badMessage:                               return "Errno(EBADMSG)"
    case .valueTooLargeForDefinedDataType:          return "Errno(EOVERFLOW)"
    case .nameNotUniqueOnNetwork:                   return "Errno(ENOTUNIQ)"
    case .fileDescriptorInBadState:                 return "Errno(EBADFD)"
    case .remoteAddressChanged:                     return "Errno(EREMCHG)"
    case .canNotAccessANeededSharedLibrary:         return "Errno(ELIBACC)"
    case .accessingACorruptedSharedLibrary:         return "Errno(ELIBBAD)"
    case .libSectionInAOutCorrupted:                return "Errno(ELIBSCN)"
    case .attemptingToLinkInTooManySharedLibraries: return "Errno(ELIBMAX)"
    case .cannotExecASharedLibraryDirectly:         return "Errno(ELIBEXEC)"
    case .illegalByteSequence:                      return "Errno(EILSEQ)"
    case .interruptedSystemCallShouldBeRestarted:   return "Errno(ERESTART)"
    case .streamsPipeError:                         return "Errno(ESTRPIPE)"
    case .tooManyUsers:                             return "Errno(EUSERS)"
    case .socketOperationOnNonSocket:               return "Errno(ENOTSOCK)"
    case .destinationAddressRequired:               return "Errno(EDESTADDRREQ)"
    case .messageTooLong:                           return "Errno(EMSGSIZE)"
    case .protocolWrongTypeForSocket:               return "Errno(EPROTOTYPE)"
    case .protocolNotAvailable:                     return "Errno(ENOPROTOOPT)"
    case .protocolNotSupported:                     return "Errno(EPROTONOSUPPORT)"
    case .socketTypeNotSupported:                   return "Errno(ESOCKTNOSUPPORT)"
    case .operationNotSupported:                    return "Errno(EOPNOTSUPP)"
    case .protocolFamilyNotSupported:               return "Errno(EPFNOSUPPORT)"
    case .addressFamilyNotSupportedByProtocol:      return "Errno(EAFNOSUPPORT)"
    case .addressAlreadyInUse:                      return "Errno(EADDRINUSE)"
    case .cannotAssignRequestedAddress:             return "Errno(EADDRNOTAVAIL)"
    case .networkIsDown:                            return "Errno(ENETDOWN)"
    case .networkIsUnreachable:                     return "Errno(ENETUNREACH)"
    case .networkDroppedConnectionOnReset:          return "Errno(ENETRESET)"
    case .softwareCausedConnectionAbort:            return "Errno(ECONNABORTED)"
    case .connectionResetByPeer:                    return "Errno(ECONNRESET)"
    case .noBufferSpaceAvailable:                   return "Errno(ENOBUFS)"
    case .socketIsAlreadyConnected:                 return "Errno(EISCONN)"
    case .socketIsNotConnected:                     return "Errno(ENOTCONN)"
    case .cannotSendAfterSocketShutdown:            return "Errno(ESHUTDOWN)"
    case .tooManyReferences:                        return "Errno(ETOOMANYREFS)"
    case .connectionTimedOut:                       return "Errno(ETIMEDOUT)"
    case .connectionRefused:                        return "Errno(ECONNREFUSED)"
    case .hostIsDown:                               return "Errno(EHOSTDOWN)"
    case .noRouteToHost:                            return "Errno(EHOSTUNREACH)"
    case .operationAlreadyInProgress:               return "Errno(EALREADY)"
    case .operationNowInProgress:                   return "Errno(EINPROGRESS)"
    case .staleFileHandle:                          return "Errno(ESTALE)"
    case .structureNeedsCleaning:                   return "Errno(EUCLEAN)"
    case .notAXENIXNamedTypeFile:                   return "Errno(ENOTNAM)"
    case .noXENIXSemaphoresAvailable:               return "Errno(ENAVAIL)"
    case .isANamedTypeFile:                         return "Errno(EISNAM)"
    case .remoteIOError:                            return "Errno(EREMOTEIO)"
    case .diskQuotaExceeded:                        return "Errno(EDQUOT)"
    case .noMediumFound:                            return "Errno(ENOMEDIUM)"
    case .wrongMediumType:                          return "Errno(EMEDIUMTYPE)"
    case .operationCanceled:                        return "Errno(ECANCELED)"
    case .requiredKeyNotAvailable:                  return "Errno(ENOKEY)"
    case .keyHasExpired:                            return "Errno(EKEYEXPIRED)"
    case .keyHasBeenRevoked:                        return "Errno(EKEYREVOKED)"
    case .keyWasRejectedByService:                  return "Errno(EKEYREJECTED)"
    case .previousOwnerDied:                        return "Errno(EOWNERDEAD)"
    case .stateNotRecoverable:                      return "Errno(ENOTRECOVERABLE)"
    case .undefind(let errorNumber):                return "Errno(UNDEFINED(\(errorNumber)))"
    }
  }
}