extension Errno: CustomStringConvertible {
  public var description: String {
    switch self {
    case .success:                                  return "NoError(success)"
    case .operationNotPermitted:                    return "Errno(operationNotPermitted)"
    case .noSuchFileOrDirectory:                    return "Errno(noSuchFileOrDirectory)"
    case .noSuchProcess:                            return "Errno(noSuchProcess)"
    case .interruptedSystemCall:                    return "Errno(interruptedSystemCall)"
    case .inputOutputError:                         return "Errno(inputOutputError)"
    case .deviceNotConfigured:                      return "Errno(deviceNotConfigured)"
    case .argumentListTooLong:                      return "Errno(argumentListTooLong)"
    case .executableFormatError:                    return "Errno(executableFormatError)"
    case .badFileDescriptor:                        return "Errno(badFileDescriptor)"
    case .noChildProcesses:                         return "Errno(noChildProcesses)"
    case .resourceTemporarilyUnavailable:           return "Errno(resourceTemporarilyUnavailable)"
    case .cannotAllocateMemory:                     return "Errno(cannotAllocateMemory)"
    case .permissionDenied:                         return "Errno(permissionDenied)"
    case .badAddress:                               return "Errno(badAddress)"
    case .blockDeviceRequired:                      return "Errno(blockDeviceRequired)"
    case .deviceOrResourceBusy:                     return "Errno(deviceOrResourceBusy)"
    case .fileExists:                               return "Errno(fileExists)"
    case .invalidCrossDeviceLink:                   return "Errno(invalidCrossDeviceLink)"
    case .noSuchDevice:                             return "Errno(noSuchDevice)"
    case .notADirectory:                            return "Errno(notADirectory)"
    case .isADirectory:                             return "Errno(isADirectory)"
    case .invalidArgument:                          return "Errno(invalidArgument)"
    case .tooManyOpenFilesInSystem:                 return "Errno(tooManyOpenFilesInSystem)"
    case .tooManyOpenFiles:                         return "Errno(tooManyOpenFiles)"
    case .inappropriateInputOutputControlForDevice: return "Errno(inappropriateInputOutputControlForDevice)"
    case .textFileBusy:                             return "Errno(textFileBusy)"
    case .fileTooLarge:                             return "Errno(fileTooLarge)"
    case .noSpaceLeftOnDevice:                      return "Errno(noSpaceLeftOnDevice)"
    case .illegalSeek:                              return "Errno(illegalSeek)"
    case .readOnlyFileSystem:                       return "Errno(readOnlyFileSystem)"
    case .tooManyLinks:                             return "Errno(tooManyLinks)"
    case .brokenPipe:                               return "Errno(brokenPipe)"
    case .numericalArgumentOutOfDomain:             return "Errno(numericalArgumentOutOfDomain)"
    case .resultTooLarge:                           return "Errno(resultTooLarge)"
    case .resourceDeadlockAvoided:                  return "Errno(resourceDeadlockAvoided)"
    case .fileNameTooLong:                          return "Errno(fileNameTooLong)"
    case .noLocksAvailable:                         return "Errno(noLocksAvailable)"
    case .functionNotImplemented:                   return "Errno(functionNotImplemented)"
    case .directoryNotEmpty:                        return "Errno(directoryNotEmpty)"
    case .tooManyLevelsOfSymbolicLinks:             return "Errno(tooManyLevelsOfSymbolicLinks)"
    case .noMessageOfDesiredType:                   return "Errno(noMessageOfDesiredType)"
    case .identifierRemoved:                        return "Errno(identifierRemoved)"
    case .channelNumberOutOfRange:                  return "Errno(channelNumberOutOfRange)"
    case .level2NotSynchronized:                    return "Errno(level2NotSynchronized)"
    case .level3Halted:                             return "Errno(level3Halted)"
    case .level3Reset:                              return "Errno(level3Reset)"
    case .linkNumberOutOfRange:                     return "Errno(linkNumberOutOfRange)"
    case .protocolDriverNotAttached:                return "Errno(protocolDriverNotAttached)"
    case .noCSIStructureAvailable:                  return "Errno(noCSIStructureAvailable)"
    case .level2Halted:                             return "Errno(level2Halted)"
    case .invalidExchange:                          return "Errno(invalidExchange)"
    case .invalidRequestDescriptor:                 return "Errno(invalidRequestDescriptor)"
    case .exchangeFull:                             return "Errno(exchangeFull)"
    case .noAnode:                                  return "Errno(noAnode)"
    case .invalidRequestCode:                       return "Errno(invalidRequestCode)"
    case .invalidSlot:                              return "Errno(invalidSlot)"
    case .badFontFileFormat:                        return "Errno(badFontFileFormat)"
    case .deviceNotAStream:                         return "Errno(deviceNotAStream)"
    case .noDataAvailable:                          return "Errno(noDataAvailable)"
    case .timerExpired:                             return "Errno(timerExpired)"
    case .outOfStreamsResources:                    return "Errno(outOfStreamsResources)"
    case .machineIsNotOnTheNetwork:                 return "Errno(machineIsNotOnTheNetwork)"
    case .packageNotInstalled:                      return "Errno(packageNotInstalled)"
    case .objectIsRemote:                           return "Errno(objectIsRemote)"
    case .linkHasBeenSevered:                       return "Errno(linkHasBeenSevered)"
    case .advertiseError:                           return "Errno(advertiseError)"
    case .srmountError:                             return "Errno(srmountError)"
    case .communicationErrorOnSend:                 return "Errno(communicationErrorOnSend)"
    case .protocolError:                            return "Errno(protocolError)"
    case .multihopAttempted:                        return "Errno(multihopAttempted)"
    case .rfsSpecificError:                         return "Errno(rfsSpecificError)"
    case .badMessage:                               return "Errno(badMessage)"
    case .valueTooLargeForDefinedDataType:          return "Errno(valueTooLargeForDefinedDataType)"
    case .nameNotUniqueOnNetwork:                   return "Errno(nameNotUniqueOnNetwork)"
    case .fileDescriptorInBadState:                 return "Errno(fileDescriptorInBadState)"
    case .remoteAddressChanged:                     return "Errno(remoteAddressChanged)"
    case .canNotAccessANeededSharedLibrary:         return "Errno(canNotAccessANeededSharedLibrary)"
    case .accessingACorruptedSharedLibrary:         return "Errno(accessingACorruptedSharedLibrary)"
    case .libSectionInAOutCorrupted:                return "Errno(libSectionInAOutCorrupted)"
    case .attemptingToLinkInTooManySharedLibraries: return "Errno(attemptingToLinkInTooManySharedLibraries)"
    case .cannotExecASharedLibraryDirectly:         return "Errno(cannotExecASharedLibraryDirectly)"
    case .illegalByteSequence:                      return "Errno(illegalByteSequence)"
    case .interruptedSystemCallShouldBeRestarted:   return "Errno(interruptedSystemCallShouldBeRestarted)"
    case .streamsPipeError:                         return "Errno(streamsPipeError)"
    case .tooManyUsers:                             return "Errno(tooManyUsers)"
    case .socketOperationOnNonSocket:               return "Errno(socketOperationOnNonSocket)"
    case .destinationAddressRequired:               return "Errno(destinationAddressRequired)"
    case .messageTooLong:                           return "Errno(messageTooLong)"
    case .protocolWrongTypeForSocket:               return "Errno(protocolWrongTypeForSocket)"
    case .protocolNotAvailable:                     return "Errno(protocolNotAvailable)"
    case .protocolNotSupported:                     return "Errno(protocolNotSupported)"
    case .socketTypeNotSupported:                   return "Errno(socketTypeNotSupported)"
    case .operationNotSupported:                    return "Errno(operationNotSupported)"
    case .protocolFamilyNotSupported:               return "Errno(protocolFamilyNotSupported)"
    case .addressFamilyNotSupportedByProtocol:      return "Errno(addressFamilyNotSupportedByProtocol)"
    case .addressAlreadyInUse:                      return "Errno(addressAlreadyInUse)"
    case .cannotAssignRequestedAddress:             return "Errno(cannotAssignRequestedAddress)"
    case .networkIsDown:                            return "Errno(networkIsDown)"
    case .networkIsUnreachable:                     return "Errno(networkIsUnreachable)"
    case .networkDroppedConnectionOnReset:          return "Errno(networkDroppedConnectionOnReset)"
    case .softwareCausedConnectionAbort:            return "Errno(softwareCausedConnectionAbort)"
    case .connectionResetByPeer:                    return "Errno(connectionResetByPeer)"
    case .noBufferSpaceAvailable:                   return "Errno(noBufferSpaceAvailable)"
    case .socketIsAlreadyConnected:                 return "Errno(socketIsAlreadyConnected)"
    case .socketIsNotConnected:                     return "Errno(socketIsNotConnected)"
    case .cannotSendAfterSocketShutdown:            return "Errno(cannotSendAfterSocketShutdown)"
    case .tooManyReferences:                        return "Errno(tooManyReferences)"
    case .connectionTimedOut:                       return "Errno(connectionTimedOut)"
    case .connectionRefused:                        return "Errno(connectionRefused)"
    case .hostIsDown:                               return "Errno(hostIsDown)"
    case .noRouteToHost:                            return "Errno(noRouteToHost)"
    case .operationAlreadyInProgress:               return "Errno(operationAlreadyInProgress)"
    case .operationNowInProgress:                   return "Errno(operationNowInProgress)"
    case .staleFileHandle:                          return "Errno(staleFileHandle)"
    case .structureNeedsCleaning:                   return "Errno(structureNeedsCleaning)"
    case .notAXENIXNamedTypeFile:                   return "Errno(notAXENIXNamedTypeFile)"
    case .noXENIXSemaphoresAvailable:               return "Errno(noXENIXSemaphoresAvailable)"
    case .isANamedTypeFile:                         return "Errno(isANamedTypeFile)"
    case .remoteIOError:                            return "Errno(remoteIOError)"
    case .diskQuotaExceeded:                        return "Errno(diskQuotaExceeded)"
    case .noMediumFound:                            return "Errno(noMediumFound)"
    case .wrongMediumType:                          return "Errno(wrongMediumType)"
    case .operationCanceled:                        return "Errno(operationCanceled)"
    case .requiredKeyNotAvailable:                  return "Errno(requiredKeyNotAvailable)"
    case .keyHasExpired:                            return "Errno(keyHasExpired)"
    case .keyHasBeenRevoked:                        return "Errno(keyHasBeenRevoked)"
    case .keyWasRejectedByService:                  return "Errno(keyWasRejectedByService)"
    case .previousOwnerDied:                        return "Errno(previousOwnerDied)"
    case .stateNotRecoverable:                      return "Errno(stateNotRecoverable)"
    case .undefind(let errorNumber):                return "Errno(undefind(\(errorNumber)))"
    }
  }
}