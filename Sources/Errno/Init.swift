extension Errno {
  public init(_ errorNumber: Int32 = errno) {
    switch errorNumber {
    case EPERM:           self = .operationNotPermitted
    case ENOENT:          self = .noSuchFileOrDirectory
    case ESRCH:           self = .noSuchProcess
    case EINTR:           self = .interruptedSystemCall
    case EIO:             self = .inputOutputError
    case ENXIO:           self = .deviceNotConfigured
    case E2BIG:           self = .argumentListTooLong
    case ENOEXEC:         self = .executableFormatError
    case EBADF:           self = .badFileDescriptor
    case ECHILD:          self = .noChildProcesses
    case EAGAIN:          self = .resourceTemporarilyUnavailable
    case ENOMEM:          self = .cannotAllocateMemory
    case EACCES:          self = .permissionDenied
    case EFAULT:          self = .badAddress
    case ENOTBLK:         self = .blockDeviceRequired
    case EBUSY:           self = .deviceOrResourceBusy
    case EEXIST:          self = .fileExists
    case EXDEV:           self = .invalidCrossDeviceLink
    case ENODEV:          self = .noSuchDevice
    case ENOTDIR:         self = .notADirectory
    case EISDIR:          self = .isADirectory
    case EINVAL:          self = .invalidArgument
    case ENFILE:          self = .tooManyOpenFilesInSystem
    case EMFILE:          self = .tooManyOpenFiles
    case ENOTTY:          self = .inappropriateInputOutputControlForDevice
    case ETXTBSY:         self = .textFileBusy
    case EFBIG:           self = .fileTooLarge
    case ENOSPC:          self = .noSpaceLeftOnDevice
    case ESPIPE:          self = .illegalSeek
    case EROFS:           self = .readOnlyFileSystem
    case EMLINK:          self = .tooManyLinks
    case EPIPE:           self = .brokenPipe
    case EDOM:            self = .numericalArgumentOutOfDomain
    case ERANGE:          self = .resultTooLarge
    case EDEADLK:         self = .resourceDeadlockAvoided
    case ENAMETOOLONG:    self = .fileNameTooLong
    case ENOLCK:          self = .noLocksAvailable
    case ENOSYS:          self = .functionNotImplemented
    case ENOTEMPTY:       self = .directoryNotEmpty
    case ELOOP:           self = .tooManyLevelsOfSymbolicLinks
    case ENOMSG:          self = .noMessageOfDesiredType
    case EIDRM:           self = .identifierRemoved
    case ECHRNG:          self = .channelNumberOutOfRange
    case EL2NSYNC:        self = .level2NotSynchronized
    case EL3HLT:          self = .level3Halted
    case EL3RST:          self = .level3Reset
    case ELNRNG:          self = .linkNumberOutOfRange
    case EUNATCH:         self = .protocolDriverNotAttached
    case ENOCSI:          self = .noCSIStructureAvailable
    case EL2HLT:          self = .level2Halted
    case EBADE:           self = .invalidExchange
    case EBADR:           self = .invalidRequestDescriptor
    case EXFULL:          self = .exchangeFull
    case ENOANO:          self = .noAnode
    case EBADRQC:         self = .invalidRequestCode
    case EBADSLT:         self = .invalidSlot
    case EBFONT:          self = .badFontFileFormat
    case ENOSTR:          self = .deviceNotAStream
    case ENODATA:         self = .noDataAvailable
    case ETIME:           self = .timerExpired
    case ENOSR:           self = .outOfStreamsResources
    case ENONET:          self = .machineIsNotOnTheNetwork
    case ENOPKG:          self = .packageNotInstalled
    case EREMOTE:         self = .objectIsRemote
    case ENOLINK:         self = .linkHasBeenSevered
    case EADV:            self = .advertiseError
    case ESRMNT:          self = .srmountError
    case ECOMM:           self = .communicationErrorOnSend
    case EPROTO:          self = .protocolError
    case EMULTIHOP:       self = .multihopAttempted
    case EDOTDOT:         self = .rfsSpecificError
    case EBADMSG:         self = .badMessage
    case EOVERFLOW:       self = .valueTooLargeForDefinedDataType
    case ENOTUNIQ:        self = .nameNotUniqueOnNetwork
    case EBADFD:          self = .fileDescriptorInBadState
    case EREMCHG:         self = .remoteAddressChanged
    case ELIBACC:         self = .canNotAccessANeededSharedLibrary
    case ELIBBAD:         self = .accessingACorruptedSharedLibrary
    case ELIBSCN:         self = .libSectionInAOutCorrupted
    case ELIBMAX:         self = .attemptingToLinkInTooManySharedLibraries
    case ELIBEXEC:        self = .cannotExecASharedLibraryDirectly
    case EILSEQ:          self = .illegalByteSequence
    case ERESTART:        self = .interruptedSystemCallShouldBeRestarted
    case ESTRPIPE:        self = .streamsPipeError
    case EUSERS:          self = .tooManyUsers
    case ENOTSOCK:        self = .socketOperationOnNonSocket
    case EDESTADDRREQ:    self = .destinationAddressRequired
    case EMSGSIZE:        self = .messageTooLong
    case EPROTOTYPE:      self = .protocolWrongTypeForSocket
    case ENOPROTOOPT:     self = .protocolNotAvailable
    case EPROTONOSUPPORT: self = .protocolNotSupported
    case ESOCKTNOSUPPORT: self = .socketTypeNotSupported
    case EOPNOTSUPP:      self = .operationNotSupported
    case EPFNOSUPPORT:    self = .protocolFamilyNotSupported
    case EAFNOSUPPORT:    self = .addressFamilyNotSupportedByProtocol
    case EADDRINUSE:      self = .addressAlreadyInUse
    case EADDRNOTAVAIL:   self = .cannotAssignRequestedAddress
    case ENETDOWN:        self = .networkIsDown
    case ENETUNREACH:     self = .networkIsUnreachable
    case ENETRESET:       self = .networkDroppedConnectionOnReset
    case ECONNABORTED:    self = .softwareCausedConnectionAbort
    case ECONNRESET:      self = .connectionResetByPeer
    case ENOBUFS:         self = .noBufferSpaceAvailable
    case EISCONN:         self = .socketIsAlreadyConnected
    case ENOTCONN:        self = .socketIsNotConnected
    case ESHUTDOWN:       self = .cannotSendAfterSocketShutdown
    case ETOOMANYREFS:    self = .tooManyReferences
    case ETIMEDOUT:       self = .connectionTimedOut
    case ECONNREFUSED:    self = .connectionRefused
    case EHOSTDOWN:       self = .hostIsDown
    case EHOSTUNREACH:    self = .noRouteToHost
    case EALREADY:        self = .operationAlreadyInProgress
    case EINPROGRESS:     self = .operationNowInProgress
    case ESTALE:          self = .staleFileHandle
    case EUCLEAN:         self = .structureNeedsCleaning
    case ENOTNAM:         self = .notAXENIXNamedTypeFile
    case ENAVAIL:         self = .noXENIXSemaphoresAvailable
    case EISNAM:          self = .isANamedTypeFile
    case EREMOTEIO:       self = .remoteIOError
    case EDQUOT:          self = .diskQuotaExceeded
    case ENOMEDIUM:       self = .noMediumFound
    case EMEDIUMTYPE:     self = .wrongMediumType
    case ECANCELED:       self = .operationCanceled
    case ENOKEY:          self = .requiredKeyNotAvailable
    case EKEYEXPIRED:     self = .keyHasExpired
    case EKEYREVOKED:     self = .keyHasBeenRevoked
    case EKEYREJECTED:    self = .keyWasRejectedByService
    case EOWNERDEAD:      self = .previousOwnerDied
    case ENOTRECOVERABLE: self = .stateNotRecoverable
    default:              self = errorNumber < 1 ? .success : .undefind(errorNumber)
    }
  }
}